"""
A valid, case-sensitive blockchain address with checksum.
"""
scalar BlockchainAddress

input CreateCustomEventInput {
  """
  List of categories that describe the entity. Max number of categories: 10.
  """
  categories: [EventCategory!]! = []
  description: String!
  name: String!

  """
  The end of the event.
  """
  nextFinishAt: DateTime!

  """
  The start of the event.
  """
  nextStartAt: DateTime!
  ownerUser: UserId!
  placeId: EntityId!

  """
  List of tags that describe the entity. Max number of tags: 10. Max tag length: 20 characters.
  """
  tags: [String!]! = []
}

input CreateCustomPlaceInput {
  """
  List of categories that describe the entity. Max number of categories: 10.
  """
  categories: [ParcelCategory!]! = []
  description: String!
  marketplace: URL
  name: String!
  ownerUser: UserId!

  """
  List of tags that describe the entity. Max number of tags: 10. Max tag length: 20 characters.
  """
  tags: [String!]! = []
  url: URL!
}

enum Currency {
  eth
  mana
  sand
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  greaterThan: DateTime
  greaterThanOrEqual: DateTime
  lessThan: DateTime
  lessThanOrEqual: DateTime
}

"""
A Lighthouse entity id.
"""
scalar EntityId

"""
A Lighthouse entity or user id.
"""
scalar EntityOrUserId

type EntityRelationship {
  entityId: EntityOrUserId!
}

enum EntityType {
  estate
  event
  member
  parcel
}

type Estate {
  """
  `true` if the entity can be viewed in a marketplace; `false` otherwise.
  """
  canViewMarketplace: Boolean!

  """
  The date and time that the entity was created.
  """
  createdAt: DateTime
  currency: Currency

  """
  Description of the entity. Max length: 5000 characters.
  """
  description: String

  """
  Unique identifier generated by Lighthouse.
  """
  entityId: EntityOrUserId!

  """
  Used if the entity is featured on Lighthouse's [homepage](https://lighthouse.world/home). Gifs and slideshows that display dynamic content are recommended. Optimized for files under 5 MB.
  """
  featuredMedia: URL
  fetchedAt: DateTime!

  """
  Displayed when viewing the entity. Optimized for files under 5 MB.
  """
  image: URL

  """
  `true` if the entity is jumpable; `false` otherwise.
  """
  jumpable: Boolean!
  liked: Boolean
  name: String

  """
  Wallet address of the entity owner.
  """
  owner: BlockchainAddress

  """
  Lighthouse user id of the entity owner. Either `owner` or `ownerUser` must be specified.
  """
  ownerUser: UserId
  pinned: Boolean
  price: Float
  priceStatus: PriceStatus
  storedAt: DateTime!
  tags: [String!]!
  tokenUri: URL

  """
  Type of the entity.
  """
  type: EntityType!

  """
  The date and time that the entity was updated.
  """
  updatedAt: DateTime

  """
  The world in which this entity can be found.
  """
  world: World!
  xCoordinate: Float
  yCoordinate: Float
}

"""
A Lighthouse estate id beginning with `lh_es`.
"""
scalar EstateId

"""
An experience in the metaverse that is delimited in time.
"""
type Event {
  """
  List of categories that describe the entity. Max number of categories: 10.
  """
  categories: [EventCategory!]!

  """
  The date and time that the entity was created.
  """
  createdAt: DateTime
  createdThroughLighthouse: Boolean!
    @deprecated(reason: "Usage no longer enforced, access to events are based on owner only.")

  """
  Description of the entity. Max length: 5000 characters.
  """
  description: String

  """
  Duration of the event in seconds, calculated from the `nextStartAt` and `nextFinishAt` fields.
  """
  durationInSeconds: Float!

  """
  Unique identifier generated by Lighthouse.
  """
  entityId: EntityOrUserId!
  estateId: EstateId

  """
  Used if the entity is featured on Lighthouse's [homepage](https://lighthouse.world/home). Gifs and slideshows that display dynamic content are recommended. Optimized for files under 5 MB.
  """
  featuredMedia: URL
  fetchedAt: DateTime!

  """
  Displayed when viewing the entity. Optimized for files under 5 MB.
  """
  image: URL
  initialStartAt: DateTime
  interested: Boolean
  isAllDay: Boolean!
  isRecurring: Boolean!

  """
  `true` if the entity is jumpable; `false` otherwise.
  """
  jumpable: Boolean!
  latestFinishAt: DateTime
  liked: Boolean
  live: Boolean!

  """
  Name of the entity. Max length: 100 characters.
  """
  name: String

  """
  The end of the event.
  """
  nextFinishAt: DateTime!

  """
  The start of the event.
  """
  nextStartAt: DateTime!

  """
  Wallet address of the entity owner.
  """
  owner: BlockchainAddress

  """
  Lighthouse user id of the entity owner. Either `owner` or `ownerUser` must be specified.
  """
  ownerUser: UserId

  """
  Lighthouse parcel id specifying the location of the event.
  """
  parcelId: ParcelId
  past: Boolean!
  pinned: Boolean
  storedAt: DateTime!

  """
  List of tags that describe the entity. Max number of tags: 10. Max tag length: 20 characters.
  """
  tags: [String!]!
  totalAttendees: Float

  """
  Type of the entity.
  """
  type: EntityType!

  """
  The date and time that the entity was updated.
  """
  updatedAt: DateTime

  """
  The location of the entity.
  """
  url: URL

  """
  The world in which this entity can be found.
  """
  world: World!
  xCoordinate: Float
  yCoordinate: Float
}

enum EventCategory {
  artExhibition
  brandLaunch
  competition
  conference
  fundraising
  giveaway
  hangout
  livePerformance
  music
  mvfw
  networking
  party
  playToEarn
  socialActivity
  sport
  talkPresentation
  workshopLecture
}

"""
A Lighthouse event id beginning with `lh_ev`.
"""
scalar EventId

input EventRecommendationsFilteringArgs {
  categories: [EventCategory!]
  nextFinishAt: DateTimeFilter
  nextStartAt: DateTimeFilter
  parcelId: EntityId
  relationshipToOwner: [RelationshipToOwner!]
  worlds: [World!]
}

enum EventSortingMethod {
  createdAt
  mostPopular
  nextFinishAtAsc
  nextFinishAtDesc
  nextStartAtAsc
  nextStartAtDesc
}

input EventsFilteringArgs {
  nextFinishAt: DateTimeFilter
  nextStartAt: DateTimeFilter
  ownerUser: UserId
  parcelId: EntityId
  worlds: [World!]
}

union FeaturedEntity = Estate | Event | Parcel

enum FollowingStatus {
  follower
  following
  friend
  none
  self
}

union GenericEntity = Estate | Event | Member | Parcel

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type JumpLocation {
  url: URL!
}

enum JumpNowLocation {
  anywhere
  featuredSpots
  friends
}

type MarketplaceLocation {
  url: URL!
}

input MediaArea {
  height: Int!
  left: Int!
  top: Int!
  width: Int!
}

type Member {
  address: BlockchainAddress
  attendingMvfw: Boolean!
  category: UserCategory!

  """
  The date and time that the entity was created.
  """
  createdAt: DateTime

  """
  Description of the entity. Max length: 5000 characters.
  """
  description: String
  entityId: EntityOrUserId!
  followerCount: Int!
  followingCount: Int!
  followingStatus: FollowingStatus
  friendCount: Int!
  handle: String
  image: URL
  name: String
  storedAt: DateTime!
  type: EntityType!

  """
  The date and time that the entity was updated.
  """
  updatedAt: DateTime
}

input MembersFilteringArgs {
  attendingMvfw: Boolean
  categories: [UserCategory!]
}

type Mutation {
  createCustomEvent(input: CreateCustomEventInput!): Event!
  createCustomPlace(input: CreateCustomPlaceInput!): Parcel!
  deleteCustomEvent(entityId: EntityId!): Event!
  deleteCustomEventFeaturedMedia(entityId: EntityId!): Event!
  deleteCustomEventImage(entityId: EntityId!): Event!
  deleteCustomPlace(entityId: EntityId!): Parcel!
  deleteCustomPlaceFeaturedMedia(entityId: EntityId!): Parcel!
  deleteCustomPlaceImage(entityId: EntityId!): Parcel!
  setFeaturedCreators(input: [UserId!]!): [UserEntityRelationship!]!
  setFeaturedEntities(input: [EntityId!]!, vrMode: Boolean): [EntityRelationship!]!
  setFeaturedEvents(input: [EventId!]!, vrMode: Boolean!): [EntityRelationship!]!
  setFeaturedPlaces(input: [ParcelId!]!, vrMode: Boolean!): [EntityRelationship!]!
  setTrendingEntities(input: [EntityId!]!): [EntityRelationship!]!
  setTrendingUsers(input: [UserId!]!): [TrendingUserRelationship!]!
  touchEntity(entityId: EntityId!, input: JSONObject!): TouchEntityData!
  updateCustomEvent(entityId: EntityId!, input: UpdateCustomEventInput!): Event!
  updateCustomEventImageFromNft(entityId: EntityId!, input: NftPictureInput!): Event!
  updateCustomEventMediaFromFile(entityId: EntityId!, input: UpdateCustomEventMediaFromFileInput!): Event!
  updateCustomPlace(entityId: EntityId!, input: UpdateCustomPlaceInput!): Parcel!
  updateCustomPlaceImageFromNft(entityId: EntityId!, input: NftPictureInput!): Parcel!
  updateCustomPlaceMediaFromFile(entityId: EntityId!, input: UpdateCustomPlaceMediaFromFileInput!): Parcel!
}

input NftPictureInput {
  contractAddress: BlockchainAddress!
  cropArea: MediaArea
  tokenId: String!
}

type PageInfo {
  hasNextPage: Boolean!
}

type PaginatedEntities {
  nodes: [GenericEntity!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedEvents {
  nodes: [Event!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedFeatured {
  nodes: [FeaturedEntity!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedMembers {
  nodes: [Member!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedParcels {
  nodes: [Parcel!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedPlaces {
  nodes: [Place!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A digital space in the metaverse.
"""
type Parcel {
  """
  `true` if the entity can be viewed in a marketplace; `false` otherwise.
  """
  canViewMarketplace: Boolean!

  """
  List of categories that describe the entity. Max number of categories: 10.
  """
  categories: [ParcelCategory!]!

  """
  The date and time that the entity was created.
  """
  createdAt: DateTime
  createdThroughLighthouse: Boolean!
    @deprecated(reason: "Usage no longer enforced, access to parcels are based on owner only.")
  currency: Currency

  """
  Description of the entity. Max length: 5000 characters.
  """
  description: String

  """
  Unique identifier generated by Lighthouse.
  """
  entityId: EntityOrUserId!
  estateId: EstateId

  """
  Used if the entity is featured on Lighthouse's [homepage](https://lighthouse.world/home). Gifs and slideshows that display dynamic content are recommended. Optimized for files under 5 MB.
  """
  featuredMedia: URL
  fetchedAt: DateTime!

  """
  Displayed when viewing the entity. Optimized for files under 5 MB.
  """
  image: URL

  """
  `true` if the entity is jumpable; `false` otherwise.
  """
  jumpable: Boolean!
  liked: Boolean
  name: String

  """
  Wallet address of the entity owner.
  """
  owner: BlockchainAddress

  """
  Lighthouse user id of the entity owner. Either `owner` or `ownerUser` must be specified.
  """
  ownerUser: UserId
  pinned: Boolean
  price: Float
  priceStatus: PriceStatus
  storedAt: DateTime!

  """
  List of tags that describe the entity. Max number of tags: 10. Max tag length: 20 characters.
  """
  tags: [String!]!
  tokenUri: URL

  """
  Type of the entity.
  """
  type: EntityType!

  """
  The date and time that the entity was updated.
  """
  updatedAt: DateTime

  """
  The location of the entity.
  """
  url: String

  """
  The world in which this entity can be found.
  """
  world: World!
  xCoordinate: Float
  yCoordinate: Float
}

enum ParcelCategory {
  art
  education
  gaming
  mvfw
  services
  shopping
  social
  work
}

"""
A Lighthouse parcel id beginning with `lh_pa`.
"""
scalar ParcelId

union Place = Estate | Parcel

input PlaceRecommendationsFilteringArgs {
  categories: [ParcelCategory!]
  relationshipToOwner: [RelationshipToOwner!]
  worlds: [World!]
}

enum PlaceSortingMethod {
  createdAt
  mostPopular
  nameAsc
  nameDesc
}

input PlacesFilteringArgs {
  ownerUser: UserId
  worlds: [World!]
}

enum PriceStatus {
  cancelled
  open
  sold
}

type Query {
  entity(entityId: EntityId!): GenericEntity!
  eventRecommendations(
    first: Int = 25
    offset: Int = 0
    sortBy: EventSortingMethod
    where: EventRecommendationsFilteringArgs
  ): PaginatedEvents!
  events(first: Int = 25, offset: Int = 0, sortBy: EventSortingMethod, where: EventsFilteringArgs): PaginatedEvents!
  featured(vrMode: Boolean = false): PaginatedFeatured!
  featuredCreators: PaginatedMembers!
  featuredEvents(vrMode: Boolean! = false): PaginatedEvents!
  featuredPlaces(vrMode: Boolean! = false): PaginatedParcels!
  jump(entityId: EntityId!): JumpLocation!
  jumpNow(location: JumpNowLocation!, vrMode: Boolean, worlds: [World!]): JumpLocation!
  jumpToUser(userId: UserId!): JumpLocation!
  marketplace(entityId: EntityId!): MarketplaceLocation!
  members(first: Int = 25, offset: Int = 0, where: MembersFilteringArgs): PaginatedMembers!
  placeRecommendations(
    first: Int = 25
    offset: Int = 0
    sortBy: PlaceSortingMethod
    where: PlaceRecommendationsFilteringArgs
  ): PaginatedPlaces!
  places(first: Int = 25, offset: Int = 0, sortBy: PlaceSortingMethod, where: PlacesFilteringArgs): PaginatedPlaces!
  search(first: Int = 25, offset: Int = 0, query: String!, where: SearchFilteringArgs): PaginatedEntities!
  trendingEntities: [GenericEntity!]!
  trendingUsers: [TrendingUser!]!
}

enum RelationshipToOwner {
  following
  friend
}

input SearchFilteringArgs {
  relationshipToOwner: [RelationshipToOwner!]
  types: [EntityType!]
  worlds: [World!]
}

type TouchEntityData {
  entityId: EntityId!
  metadata: JSONObject!
}

type TrendingUser {
  entityId: EntityOrUserId!
  handle: String
  name: String
}

type TrendingUserRelationship {
  entityId: EntityOrUserId!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

input UpdateCustomEventInput {
  """
  List of categories that describe the entity. Max number of categories: 10.
  """
  categories: [EventCategory!] = []

  """
  Description of the entity. Max length: 5000 characters.
  """
  description: String

  """
  Name of the entity. Max length: 100 characters.
  """
  name: String

  """
  The end of the event.
  """
  nextFinishAt: DateTime

  """
  The start of the event.
  """
  nextStartAt: DateTime

  """
  Lighthouse user id of the entity owner. Either `owner` or `ownerUser` must be specified.
  """
  ownerUser: UserId
  placeId: EntityId

  """
  List of tags that describe the entity. Max number of tags: 10. Max tag length: 20 characters.
  """
  tags: [String!] = []
}

input UpdateCustomEventMediaFromFileInput {
  featuredMedia: UpdateMediaFromFileInput
  image: UpdateMediaFromFileInput
}

input UpdateCustomPlaceInput {
  """
  List of categories that describe the entity. Max number of categories: 10.
  """
  categories: [ParcelCategory!] = []

  """
  Description of the entity. Max length: 5000 characters.
  """
  description: String
  marketplace: URL

  """
  Name of the entity. Max length: 100 characters.
  """
  name: String

  """
  Lighthouse user id of the entity owner. Either `owner` or `ownerUser` must be specified.
  """
  ownerUser: UserId

  """
  List of tags that describe the entity. Max number of tags: 10. Max tag length: 20 characters.
  """
  tags: [String!] = []

  """
  The location of the entity.
  """
  url: String
}

input UpdateCustomPlaceMediaFromFileInput {
  featuredMedia: UpdateMediaFromFileInput
  image: UpdateMediaFromFileInput
}

input UpdateMediaFromFileInput {
  cropArea: MediaArea
  file: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

enum UserCategory {
  brand
  creator
  explorer
  lightkeeper
}

type UserEntityRelationship {
  entityId: EntityOrUserId!
  userId: UserId!
}

"""
A Lighthouse user id beginning with `lh_us`.
"""
scalar UserId

enum World {
  arium
  artifexUnreal
  astra
  createra
  decentraland
  ethereal
  hiberWorld
  hyperfy
  janusXr
  lvcidia
  mona
  mozillaHubs
  muse
  onCyber
  portals
  protoworld
  rareRooms
  ronday
  rove
  simulacra
  somniumSpace
  sougen
  soutsideCity
  spatial
  substrata
  swivelMeta
  theNemesis
  theSandbox
  tz1and
  vesta
  viverse
  voxels
  vrChat
  w3rlds
  webaverse
}
