enum ActivityVerb {
  create
  follow
  goLive
  interested
}

type AkuAnswerValidation {
  isAnswerValid: Boolean!
  questId: AkuQuestId!
}

type AkuChapter {
  chapterName: AkuChapterName!
  quests: [AkuQuest!]!
  status: AkuChapterStatus!
}

"""
An Aku chapter id.
"""
scalar AkuChapterId

enum AkuChapterName {
  ethDenver
  nftNyc
  nftParis
}

enum AkuChapterStatus {
  active
  expired
  upcoming
}

type AkuQuest {
  answer: String
  chapterId: String!
  day: Int!
  questId: String!
  question: String
  type: AkuQuestType!
}

"""
An Aku quest id.
"""
scalar AkuQuestId

enum AkuQuestType {
  extra
  extraWithoutValidation
  main
}

type AkuRegistrationResult {
  email: String!
}

type ApiExtensionToken {
  token: String!
  userId: String!
}

type ApiProfileRole {
  roles: [Role!]!
}

input AppearOfflineInput {
  appearOffline: Boolean!
}

input AttendMvfwInput {
  attendMvfw: Boolean!
}

type AttendeeStatus {
  attendingMvfw: Boolean!
}

type AvatarClaimedState {
  avatarClaimedAt: DateTime!
  avatarType: ClaimAvatarType!
  avatarUrl: URL!
  userId: UserId!
}

input BatchDeleteProfileInput {
  userIds: [UserId!]!
}

type BatchDeleteProfileReport {
  deletedIds: [UserId!]!
  missingIds: [UserId!]!
}

"""
A valid, case-sensitive blockchain address with checksum.
"""
scalar BlockchainAddress

enum ClaimAvatarType {
  avatarInviteClaimed
  avatarOnboardingClaimed
}

input CreateAkuChapterInput {
  chapterName: AkuChapterName!
  endDate: DateTime!
  startDate: DateTime!
}

input CreateAkuQuestInput {
  answer: String!
  chapterId: String!
  day: Int!
  question: String
  type: AkuQuestType!
}

input CreateEmptyProfileInput {
  walletAddress: BlockchainAddress!
}

enum Currency {
  eth
  mana
  sand
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  greaterThan: DateTime
  greaterThanOrEqual: DateTime
  lessThan: DateTime
  lessThanOrEqual: DateTime
}

type DeletedObject {
  entityId: EntityOrUserId!
}

"""
A Lighthouse entity id.
"""
scalar EntityId

input EntityIdArgs {
  entityId: EntityId!
}

"""
A Lighthouse entity or user id.
"""
scalar EntityOrUserId

enum EntityType {
  estate
  event
  member
  parcel
}

type Estate {
  """
  `true` if the entity can be viewed in a marketplace; `false` otherwise.
  """
  canViewMarketplace: Boolean!

  """
  The date and time that the entity was created.
  """
  createdAt: DateTime
  currency: Currency

  """
  Description of the entity. Max length: 5000 characters.
  """
  description: String

  """
  Unique identifier generated by Lighthouse.
  """
  entityId: EntityOrUserId!

  """
  Used if the entity is featured on Lighthouse's [homepage](https://lighthouse.world/home). Gifs and slideshows that display dynamic content are recommended. Optimized for files under 5 MB.
  """
  featuredMedia: URL
  fetchedAt: DateTime!

  """
  Displayed when viewing the entity. Optimized for files under 5 MB.
  """
  image: URL

  """
  `true` if the entity is jumpable; `false` otherwise.
  """
  jumpable: Boolean!
  liked: Boolean
  name: String

  """
  Wallet address of the entity owner.
  """
  owner: BlockchainAddress

  """
  Lighthouse user id of the entity owner. Either `owner` or `ownerUser` must be specified.
  """
  ownerUser: UserId
  pinned: Boolean
  price: Float
  priceStatus: PriceStatus
  storedAt: DateTime!
  tags: [String!]!
  tokenUri: URL

  """
  Type of the entity.
  """
  type: EntityType!

  """
  The date and time that the entity was updated.
  """
  updatedAt: DateTime

  """
  The world in which this entity can be found.
  """
  world: World!
  xCoordinate: Float
  yCoordinate: Float
}

"""
A Lighthouse estate id beginning with `lh_es`.
"""
scalar EstateId

"""
An experience in the metaverse that is delimited in time.
"""
type Event {
  """
  List of categories that describe the entity. Max number of categories: 10.
  """
  categories: [EventCategory!]!

  """
  The date and time that the entity was created.
  """
  createdAt: DateTime
  createdThroughLighthouse: Boolean!
    @deprecated(reason: "Usage no longer enforced, access to events are based on owner only.")

  """
  Description of the entity. Max length: 5000 characters.
  """
  description: String

  """
  Duration of the event in seconds, calculated from the `nextStartAt` and `nextFinishAt` fields.
  """
  durationInSeconds: Float!

  """
  Unique identifier generated by Lighthouse.
  """
  entityId: EntityOrUserId!
  estateId: EstateId

  """
  Used if the entity is featured on Lighthouse's [homepage](https://lighthouse.world/home). Gifs and slideshows that display dynamic content are recommended. Optimized for files under 5 MB.
  """
  featuredMedia: URL
  fetchedAt: DateTime!

  """
  Displayed when viewing the entity. Optimized for files under 5 MB.
  """
  image: URL
  initialStartAt: DateTime
  interested: Boolean
  isAllDay: Boolean!
  isRecurring: Boolean!

  """
  `true` if the entity is jumpable; `false` otherwise.
  """
  jumpable: Boolean!
  latestFinishAt: DateTime
  liked: Boolean
  live: Boolean!

  """
  Name of the entity. Max length: 100 characters.
  """
  name: String

  """
  The end of the event.
  """
  nextFinishAt: DateTime!

  """
  The start of the event.
  """
  nextStartAt: DateTime!

  """
  Wallet address of the entity owner.
  """
  owner: BlockchainAddress

  """
  Lighthouse user id of the entity owner. Either `owner` or `ownerUser` must be specified.
  """
  ownerUser: UserId

  """
  Lighthouse parcel id specifying the location of the event.
  """
  parcelId: ParcelId
  past: Boolean!
  pinned: Boolean
  storedAt: DateTime!

  """
  List of tags that describe the entity. Max number of tags: 10. Max tag length: 20 characters.
  """
  tags: [String!]!
  totalAttendees: Float

  """
  Type of the entity.
  """
  type: EntityType!

  """
  The date and time that the entity was updated.
  """
  updatedAt: DateTime

  """
  The location of the entity.
  """
  url: URL

  """
  The world in which this entity can be found.
  """
  world: World!
  xCoordinate: Float
  yCoordinate: Float
}

enum EventCategory {
  artExhibition
  brandLaunch
  competition
  conference
  fundraising
  giveaway
  hangout
  livePerformance
  music
  mvfw
  networking
  party
  playToEarn
  socialActivity
  sport
  talkPresentation
  workshopLecture
}

input FollowInput {
  targetUserId: UserId!
}

type FollowRelationship {
  currentUser: Profile!
  targetUser: Profile!
}

enum FollowingStatus {
  follower
  following
  friend
  none
  self
}

enum FriendListSortingMethod {
  alias
  date
  isInWorld
  isOnline
}

input InterestedFilteringArgs {
  nextFinishAt: DateTimeFilter
  nextStartAt: DateTimeFilter
}

enum InterestedSortingMethod {
  nextFinishAtAsc
  nextFinishAtDesc
  nextStartAtAsc
  nextStartAtDesc
}

type InviteLink {
  url: URL!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type JumpLog {
  entity: JumpableEntity!
  lastJumpDate: DateTime!
}

type JumpToUserLocation {
  url: URL!
}

union JumpableEntity = Estate | Event | Parcel

input LightkeeperLeaderboardFilteringArgs {
  payPeriodStartAt: DateTime
}

type LightkeeperPayPeriods {
  payPeriods: [DateTime!]!
}

type LightkeeperStatsSummary {
  dollarsEarned: Float!
  lastUpdatedAt: DateTime!
  lightkeeper: Profile!
  pointsEarned: Int!
  rank: Int!
  usersReferred: Int!
}

input LightkeeperStatsSummaryFilteringArgs {
  payPeriodStartAt: DateTime
}

union LikableEntity = Estate | Event | Parcel

input LocationInput {
  location: URL!
}

enum LocationSharingType {
  allUsers
  friends
  friendsAndFollowers
}

type LocationStatus {
  activatePublicLink: Boolean!
  allowsSharingLocation: Boolean!
  lastLocation: UserLocation
  locationSharingType: LocationSharingType!
}

input LogJumpInput {
  entityId: EntityId
  jumpedToUserId: UserId
  url: URL
}

type LogoutFromExtensionResult {
  tokensFlushed: Int!
}

input MediaArea {
  height: Int!
  left: Int!
  top: Int!
  width: Int!
}

input MergeProfilesInput {
  sourceUserId: UserId!
}

type Mutation {
  appearOffline(input: AppearOfflineInput!, userId: UserId!): Status!
  attendMvfw(input: AttendMvfwInput!, userId: UserId!): AttendeeStatus!
  batchDeleteProfile(input: BatchDeleteProfileInput!): BatchDeleteProfileReport!
  createAkuChapter(input: CreateAkuChapterInput!): AkuChapter!
  createAkuQuest(input: CreateAkuQuestInput!): AkuQuest!
  createEmptyProfile(input: CreateEmptyProfileInput!): Profile!
  deleteAkuChapter(chapterId: AkuChapterId!): AkuChapter!
  deleteAkuQuest(questId: AkuQuestId!): AkuQuest!
  deleteProfile(userId: UserId!): Profile!
  deleteProfileBanner(userId: UserId!): Profile!
  deleteProfilePicture(userId: UserId!): Profile!
  follow(input: FollowInput!, userId: UserId!): FollowRelationship!
  generateExtensionToken: ApiExtensionToken!
  getUserShareableJumpUrl(userId: UserId!): JumpToUserLocation!
  grantAdminRole(userId: UserId!): RoleRelationship!
  interestedInEvent(input: EntityIdArgs!, userId: UserId!): UserEntityRelationship!
  likeEntity(input: EntityIdArgs!, userId: UserId!): UserEntityRelationship!
  logJump(input: LogJumpInput!, userId: UserId!): UserEntityJumpRelationship!
  logoutFromExtension: LogoutFromExtensionResult!
  mergeProfiles(input: MergeProfilesInput!, userId: UserId!): Profile!
  pinEntity(input: EntityIdArgs!, userId: UserId!): UserEntityRelationship!
  registerToAku(input: RegisterToAkuInput!): AkuRegistrationResult!
  report(entityId: EntityOrUserId!, input: ReportInput!): ReportMessage!
  reportLiveStatus(userId: UserId!): Status!
  requestDeleteProfile(userId: UserId!): Profile!
  revokeAdminRole(userId: UserId!): RoleRelationship!
  setUserState(input: SetUserStateInput!, userId: UserId!): UserState!
  touchProfile(input: JSONObject!, userId: UserId!): TouchProfileData!
  trackUserLocation(input: LocationInput!, userId: UserId!): TrackUserLocation!
  unfollow(input: FollowInput!, userId: UserId!): FollowRelationship!
  uninterestedInEvent(input: EntityIdArgs!, userId: UserId!): UserEntityRelationship!
  unlikeEntity(input: EntityIdArgs!, userId: UserId!): UserEntityRelationship!
  unpinEntity(input: EntityIdArgs!, userId: UserId!): UserEntityRelationship!
  updateAkuChapter(chapterId: AkuChapterId!, input: UpdateAkuChapterInput!): AkuChapter!
  updateAkuQuest(input: UpdateAkuQuestInput!, questId: AkuQuestId!): AkuQuest!
  updateCustomStatus(input: UpdateCustomStatusInput!, userId: UserId!): Status!
  updateLocationStatus(input: UpdateLocationStatusInput!, userId: UserId!): LocationStatus!
  updateNotificationSettings(input: NotificationSettingsInput!, userId: UserId!): NotificationSettings!
  updateProfile(input: UpdateProfileInput!, userId: UserId!): Profile!
  updateProfileBannerFromNft(input: UpdatePictureFromNftInput!, userId: UserId!): Profile!
  updateProfileBannerFromUrl(input: UpdatePictureFromUrlInput!, userId: UserId!): Profile!
  updateProfileMediaFromFile(input: UpdateProfileMediaFromFileInput!, userId: UserId!): Profile!
  updateProfilePictureFromNft(input: UpdatePictureFromNftInput!, userId: UserId!): Profile!
  updateProfilePictureFromUrl(input: UpdatePictureFromUrlInput!, userId: UserId!): Profile!
  validateAkuAnswer(input: ValidateAkuAnswerInput!, userId: UserId!): AkuAnswerValidation!
}

type Notification {
  activityId: String!
  actor: NotificationActor!
  id: String!
  isRead: Boolean!
  isSeen: Boolean!
  object: NotificationObject!
  time: DateTime!
  verb: ActivityVerb!
}

union NotificationActor = DeletedObject | Event | Profile

union NotificationObject = DeletedObject | Estate | Event | Parcel | Profile

type NotificationSettings {
  eventGoLive: Boolean!
  follow: Boolean!
  followingActivity: Boolean!
  friendActivity: Boolean!
  ownedEntity: Boolean!
}

input NotificationSettingsInput {
  eventGoLive: Boolean
  follow: Boolean
  followingActivity: Boolean
  friendActivity: Boolean
  ownedEntity: Boolean
}

type NotificationsStatus {
  hasUnseenNotifications: Boolean!
}

type NotificationsToken {
  token: String!
}

type OnboardingStatus {
  stepsUncompleted: Int!
}

type PageInfo {
  hasNextPage: Boolean!
}

type PaginatedInterested {
  nodes: [Event!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedJumpLogs {
  nodes: [JumpLog!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedLightkeeperStatsSummaries {
  lastUpdatedAt: DateTime!
  nodes: [LightkeeperStatsSummary!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedLikes {
  nodes: [LikableEntity!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedNotifications {
  nodes: [Notification!]
  pageInfo: PageInfo!
}

type PaginatedPins {
  nodes: [PinnableEntity!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedProfiles {
  nodes: [Profile!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedReferredUserStats {
  nodes: [ReferredUserStats!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A digital space in the metaverse.
"""
type Parcel {
  """
  `true` if the entity can be viewed in a marketplace; `false` otherwise.
  """
  canViewMarketplace: Boolean!

  """
  List of categories that describe the entity. Max number of categories: 10.
  """
  categories: [ParcelCategory!]!

  """
  The date and time that the entity was created.
  """
  createdAt: DateTime
  createdThroughLighthouse: Boolean!
    @deprecated(reason: "Usage no longer enforced, access to parcels are based on owner only.")
  currency: Currency

  """
  Description of the entity. Max length: 5000 characters.
  """
  description: String

  """
  Unique identifier generated by Lighthouse.
  """
  entityId: EntityOrUserId!
  estateId: EstateId

  """
  Used if the entity is featured on Lighthouse's [homepage](https://lighthouse.world/home). Gifs and slideshows that display dynamic content are recommended. Optimized for files under 5 MB.
  """
  featuredMedia: URL
  fetchedAt: DateTime!

  """
  Displayed when viewing the entity. Optimized for files under 5 MB.
  """
  image: URL

  """
  `true` if the entity is jumpable; `false` otherwise.
  """
  jumpable: Boolean!
  liked: Boolean
  name: String

  """
  Wallet address of the entity owner.
  """
  owner: BlockchainAddress

  """
  Lighthouse user id of the entity owner. Either `owner` or `ownerUser` must be specified.
  """
  ownerUser: UserId
  pinned: Boolean
  price: Float
  priceStatus: PriceStatus
  storedAt: DateTime!

  """
  List of tags that describe the entity. Max number of tags: 10. Max tag length: 20 characters.
  """
  tags: [String!]!
  tokenUri: URL

  """
  Type of the entity.
  """
  type: EntityType!

  """
  The date and time that the entity was updated.
  """
  updatedAt: DateTime

  """
  The location of the entity.
  """
  url: String

  """
  The world in which this entity can be found.
  """
  world: World!
  xCoordinate: Float
  yCoordinate: Float
}

enum ParcelCategory {
  art
  education
  gaming
  mvfw
  services
  shopping
  social
  work
}

"""
A Lighthouse parcel id beginning with `lh_pa`.
"""
scalar ParcelId

union PinnableEntity = Estate | Event | Parcel

enum PriceStatus {
  cancelled
  open
  sold
}

type Profile {
  alias: String
  attendingMvfw: Boolean!
  banner: URL
  category: UserCategory!
  createdAt: DateTime!
  customStatus: String
  description: String
  discord: URL
  discordUsername: String
  followerCount: Int!
  followingCount: Int!
  followingStatus: FollowingStatus
  friendCount: Int!
  handle: String
  instagram: URL
  isOnline: Boolean!
  location: UserLocation
  medium: URL
  mirror: URL
  notificationSettings: NotificationSettings
  picture: URL
  tags: [String!]!
  twitter: URL
  updatedAt: DateTime!
  userId: String!
  walletAddress: BlockchainAddress
  website: URL
}

type Query {
  akuChapter(chapterName: AkuChapterName!): AkuChapter!
  claimAndGetAvatar(step: ClaimAvatarType!, userId: UserId!): AvatarClaimedState!
  facebookInvite: InviteLink!
  followerRecommendations(first: Int = 25, offset: Int = 0, userId: UserId!): PaginatedProfiles!
  followers(first: Int = 25, offset: Int = 0, sortBy: RelationListSortingMethod, userId: UserId!): PaginatedProfiles!
  following(first: Int = 25, offset: Int = 0, sortBy: RelationListSortingMethod, userId: UserId!): PaginatedProfiles!
  friends(first: Int = 25, offset: Int = 0, sortBy: FriendListSortingMethod, userId: UserId!): PaginatedProfiles!
  helloWorld: String!
  interested(
    first: Int = 25
    offset: Int = 0
    sortBy: InterestedSortingMethod
    userId: UserId!
    where: InterestedFilteringArgs
  ): PaginatedInterested!
  jumpHistory(first: Int = 25, offset: Int = 0, userId: UserId!): PaginatedJumpLogs!
  lightkeeperLeaderboard(
    first: Int = 25
    offset: Int = 0
    where: LightkeeperLeaderboardFilteringArgs
  ): PaginatedLightkeeperStatsSummaries!
  lightkeeperPayPeriods(userId: UserId!): LightkeeperPayPeriods!
  lightkeeperStatsSummary(userId: UserId!, where: LightkeeperStatsSummaryFilteringArgs): LightkeeperStatsSummary!
  likes(first: Int = 25, offset: Int = 0, userId: UserId!): PaginatedLikes!
  locationStatus(userId: UserId!): LocationStatus!
  mvfwAttendees(first: Int = 25, offset: Int = 0, userId: UserId): PaginatedProfiles!
  notifications(after: String, first: Int = 5, userId: UserId!): PaginatedNotifications!
  notificationsStatus(userId: UserId!): NotificationsStatus!
  notificationsToken: NotificationsToken!
  openInvites: PaginatedProfiles!
  pins(first: Int = 25, offset: Int = 0, userId: UserId!): PaginatedPins!
  profile(handle: String, userId: UserId): Profile!
  profileFromToken(isLogin: Boolean = false): Profile!
  profileRolesFromToken: ApiProfileRole!
  redditInvite: InviteLink!
  referredUserStats(
    first: Int = 25
    offset: Int = 0
    userId: UserId!
    where: ReferredUserStatsFilteringArgs
  ): PaginatedReferredUserStats!
  status(userId: UserId!): Status!
  telegramInvite: InviteLink!
  twitterInvite: InviteLink!
  userOnboardingState(userId: UserId!): UserOnboardingState!
  userState(userId: UserId!): UserState!
}

type ReferredUserStats {
  cameBack: Boolean!
  daysLeft: Int!
  dollarsEarned: Float!
  extensionLogin: Boolean!
  followedOtherUsers: Boolean!
  jumpedToOtherUsers: Boolean!
  personalizedGate: Boolean!
  pointsEarned: Int!
  profile: Profile!
  progress: Float!
}

input ReferredUserStatsFilteringArgs {
  payPeriodStartAt: DateTime
}

input RegisterToAkuInput {
  email: String!
  subscribeToNewsletter: Boolean!
}

enum RelationListSortingMethod {
  alias
  date
  isInWorld
  isOnline
}

input ReportInput {
  description: String!
}

type ReportMessage {
  message: String!
}

enum Role {
  admin
  dev
  lightkeeper
}

type RoleRelationship {
  createdAt: DateTime!
  roles: [Role!]!
  updatedAt: DateTime!
  userId: UserId!
}

input SetUserStateInput {
  frontendState: JSONObject
  onboardingCompleted: Boolean
}

type Status {
  appearOffline: Boolean!
  customStatus: String
  customStatusExpiresAt: DateTime
  isOnline: Boolean!
}

type Subscription {
  onboardingStateUpdated(userId: UserId!): OnboardingStatus!
}

type TouchProfileData {
  metadata: JSONObject!
  userId: String!
}

type TrackUserLocation {
  url: URL
  world: World
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

input UpdateAkuChapterInput {
  chapterName: AkuChapterName!
  endDate: DateTime!
  startDate: DateTime!
}

input UpdateAkuQuestInput {
  answer: String
  day: Int
  question: String
  type: AkuQuestType
}

input UpdateCustomStatusInput {
  customStatus: String
  customStatusExpiresAt: DateTime
}

input UpdateLocationStatusInput {
  activatePublicLink: Boolean
  allowsSharingLocation: Boolean
  locationSharingType: LocationSharingType
}

input UpdateMediaFromFileInput {
  cropArea: MediaArea
  file: Upload!
}

input UpdatePictureFromNftInput {
  contractAddress: String!
  cropArea: MediaArea
  tokenId: String!
}

input UpdatePictureFromUrlInput {
  url: String!
}

input UpdateProfileInput {
  alias: String
  category: UserCategory
  description: String
  discord: URL
  discordUsername: String
  handle: String
  instagram: URL
  medium: URL
  mirror: URL
  tags: [String!] = []
  twitter: URL
  website: URL
}

input UpdateProfileMediaFromFileInput {
  banner: UpdateMediaFromFileInput
  picture: UpdateMediaFromFileInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

enum UserCategory {
  brand
  creator
  explorer
  lightkeeper
}

type UserEntityJumpRelationship {
  entityId: EntityOrUserId
  jumpedToUserId: UserId
  url: URL
  userId: UserId!
}

type UserEntityRelationship {
  entityId: EntityOrUserId!
  userId: UserId!
}

"""
A Lighthouse user id beginning with `lh_us`.
"""
scalar UserId

type UserLocation {
  lastSeenAt: DateTime!
  url: URL!
  world: World!
}

type UserOnboardingState {
  avatarInviteClaimedAt: DateTime
  avatarOnboardingClaimedAt: DateTime
  stepExtensionInstallAt: DateTime
  stepGateModifAt: DateTime
  stepInviteFriendAt: DateTime
  stepPinAt: DateTime
  userId: UserId!
}

type UserState {
  frontendState: JSONObject!
  onboardingCompleted: Boolean!
}

input ValidateAkuAnswerInput {
  answer: String!
  questId: AkuQuestId!
}

enum World {
  arium
  artifexUnreal
  astra
  createra
  decentraland
  ethereal
  hiberWorld
  hyperfy
  janusXr
  lvcidia
  mona
  mozillaHubs
  muse
  onCyber
  portals
  protoworld
  rareRooms
  ronday
  rove
  simulacra
  somniumSpace
  sougen
  soutsideCity
  spatial
  substrata
  swivelMeta
  theNemesis
  theSandbox
  tz1and
  vesta
  viverse
  voxels
  vrChat
  w3rlds
  webaverse
}
